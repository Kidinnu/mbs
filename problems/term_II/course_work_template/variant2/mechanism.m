%% ========================================================================
% Описание модели
% =========================================================================
clc;
% Количество тел
p.n  = 3;

% Колчиество степеней свободы в каждом шарнире (от 1 до 3)
p.na = [1;1;1];

% Матрица инцидентности 
p.S0 = [ 1  0  0];
p.S  = [-1  1  0  
         0 -1  1
         0  0 -1];     
    
% Шарнирные векторы
p.C  = zeros(3,p.n,p.n);
% Все векторы нулевые кроме этих:
p.C(:,1,1)  = [ 0.5;0.0; 1.0];
p.C(:,1,2)  = [-0.5;0.0;-1.0];

p.C(:,2,2)  = [ 1;0; 0.0];
p.C(:,2,3)  = [ 0;0;-0.5];
p.C(:,3,3)  = [ 0;0;+0.5];

% Массы тел
p.mass = [3; 2; 1];       

% Тензоры инерции тел
p.I    = zeros(3,3,p.n);
p.I(:,:,1) = p.mass(1)*diag([4/3,4/3,0.6*4/2]);     % Iz = 60% of (Ix,Iy)
p.I(:,:,2) = p.mass(2)*diag([4/3,4/3,0.6*4/3]);     % Iz = 60% of (Ix,Iy)
p.I(:,:,3) = p.mass(3)*diag([4/3,4/3,0.6*4/3]);

%
% Кинематика
%
p.A  = cell(p.n,1);
p.p  = cell(p.n,1);
p.pw = cell(p.n,1);

% Матрицы поворота вокруг осей 
Ax = @(x) [1 0 0; 0 cos(x) -sin(x); 0 sin(x) cos(x)];
Ay = @(x) [cos(x) 0 sin(x); 0 1 0; - sin(x) 0 cos(x)];
Az = @(x) [cos(x) -sin(x) 0; sin(x) cos(x) 0; 0 0 1];

% Первый шарнир
p.A{1} = @(q) Az(q(1));

% Второй шарнир
p.A{2} = @(q) Ax(q(1));

% Третий шарнир
p.A{3} = @(q) Ax(q(1));

% Единичные векторы элементарных поворотов в шарнирах
% p-vectors
p.p{1} = @(q) [0;0;1];
p.p{2} = @(q) [1;0;0];
p.p{3} = @(q) [1;0;0];

% Выражения для относительной скорости, как функции обобщенных координат и
% обобщенных скорсотей
p.Wr{1} = @(q,dq)  p.p{1}(q)*dq;
p.Wr{2} = @(q,dq)  p.p{2}(q)*dq;
p.Wr{3} = @(q,dq)  p.p{3}(q)*dq;

% Производные

p.pw{1} = @(q,dq) [0;0;0]; 
p.pw{2} = @(q,dq) [0;0;0]; 
p.pw{3} = @(q,dq) [0;0;0]; 
% ========================================================================
% Preprocessing
% =========================================================================
preproc;
% ========================================================================
% Simulation
% =========================================================================
% Начальные условия
q0 = [0; 0; 1; 0; 0; 0];
% Интегрирование
[t, q] = ode113(@(t,q) ode_dqdt(t,q,p), [0 5], q0, odeset('RelTol',1e-7));
fprintf('OK\n');

%% ========================================================================
% Пособработка
% =========================================================================
set(0,'defaultLineLineWidth',2);
set(0,'defaultFigureColor','w');
set(0,'defaultAxesFontSize',12);
set(0,'DefaultAxesXGrid','on');
set(0,'DefaultAxesYGrid','on');

figure;
plot(t, q(:,1:3));legend('\phi_{1}, \phi_{2}, \phi_{3}');xlabel('t, s');
set(gca,'FontSize',12); grid on;
%% ========================================================================
% Validation : Checking conservation of the energy
% =========================================================================
figure;
[T, V] = Energy(q,p);
figure;
plot(t, T+V,'-',t, T,'--', t, V,':'); 
legend('Total energy', 'Kinetic energy', 'Potential energy'); 
xlabel('t, s'); ylabel('Energy, J');

%% ========================================================================
% Export data for animation 
% =========================================================================
csvwrite('results.csv',q)
csvwrite('vec_d.csv',p.d)
