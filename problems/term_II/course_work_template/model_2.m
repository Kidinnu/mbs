%% ========================================================================
% Описание модели
% =========================================================================
clc;
% Количество тел
p.n  = 5;

% Колчиество степеней свободы в каждом шарнире (от 1 до 3)
p.na = [1;2;1;1;1];

% Матрица инцидентности 
p.S0 = [1 0 0 0 0];
p.S  = [-1  1  0  0  0    
         0 -1  1  0  0
         0  0 -1  1  1
         0  0  0 -1  0
         0  0  0  0 -1];

% Шарнирные вектора
p.C  = zeros(3,p.n,p.n);
p.C(:,1,1)  = [0;0;+1];
p.C(:,1,2)  = [0;0;-1];
p.C(:,2,2)  = [0;0;+1];
p.C(:,2,3)  = [0;0;-1];
p.C(:,3,3)  = [0;0;+1];
p.C(:,3,4)  = [+0.5;0;0];
p.C(:,3,5)  = [-0.5;0;0];
p.C(:,4,4)  = [0;0;+0.5];
p.C(:,5,5)  = [0;0;+0.5];

% Масса тел
p.mass = [3;3;2;1.5;1.5];       

% Тензор инерции
p.I    = zeros(3,3,p.n);
p.I(:,:,1) = p.mass(1)*diag([4/3,4/3,0.6*4/3]);     % Iz = 60% от (Ix,Iy)
p.I(:,:,2) = p.mass(2)*diag([4/3,4/3,0.6*4/3]);     % Iz = 60% от (Ix,Iy)
p.I(:,:,3) = p.mass(3)*diag([1/6,5/24,1/24]);
p.I(:,:,4) = p.mass(4)*diag([1/3,1/3,0.6*1/3]);     % Iz = 60% от (Ix,Iy)
p.I(:,:,5) = p.mass(5)*diag([1/3,1/3,0.6*1/3]);     % Iz = 60% от (Ix,Iy)

% Кинематика
p.A  = cell(p.n,1);
p.p  = cell(p.n,1);
p.pw = cell(p.n,1);

% Базисы вращения
Ax = @(x) [1 0 0; 0 cos(x) -sin(x); 0 sin(x) cos(x)];
Ay = @(x) [cos(x) 0 sin(x); 0 1 0; - sin(x) 0 cos(x)];
Az = @(x) [cos(x) -sin(x) 0; sin(x) cos(x) 0; 0 0 1];

% 0-1 (от 1 до 0) соединение (цилиндрическое)
p.A{1} = @(q) Ax(q);

% 1-2 (от 2 до 1) соединение (универсальное)
p.A{2} = @(q) Ax(q(1))* Ay(q(2));

% 2-3 (от 3 до 2) соединение (цилиндрическое)
p.A{3} = @(q) Ax(q);

% 3-4 (от 4 до 3) соединение (цилиндрическое)
p.A{4} = @(q) Ay(q);

% 3-5 (от 5 до 3) соединение (цилиндрическое)
p.A{5} = @(q) Ay(q);

% p-вектор
% 0-1 цилиндрическое соединение: 3 x 1 
p.p{1} = @(q) [1;0;0];
% 1-2 универсальное соединение: 3 x 2
%p.p{2} = @(q) [[cos(q(2));0;sin(q(2))] [0;1;0]];
p.p{2} = @(q) [[cos(q(2));0;sin(q(2))] [0;1;0]];
% 2-3 цилиндрическое соединение: 3 x 1
p.p{3} = @(q) [1;0;0];

% 3-4 цилиндрическое соединение: 3 x 1
p.p{4} = @(q) [0;1;0];

% 3-5 цилиндрическое соединение: 3 x 1
p.p{5} = @(q) [0;1;0];

% Относительная угловая скорость
p.Wr{1} = @(q,dq)  p.p{1}(q)*dq;
p.Wr{2} = @(q,dq)  p.p{2}(q)*[dq(1);dq(2)];
p.Wr{3} = @(q,dq)  p.p{3}(q)*dq;
p.Wr{4} = @(q,dq)  p.p{4}(q)*dq;
p.Wr{5} = @(q,dq)  p.p{5}(q)*dq;

% Относительное угловое ускорение
p.pw{1} = @(q,dq) [0;0;0];
p.pw{2} = @(q,dq) [-sin(q(2))*dq(2)*dq(1);
                   0;
                   cos(q(2))*dq(2)*dq(1)]; 

p.pw{3} = @(q,dq) [0;0;0]; 
p.pw{4} = @(q,dq) [0;0;0]; 
p.pw{5} = @(q,dq) [0;0;0]; 
% ========================================================================
% Препроцессинг (предварительная обработка)
% =========================================================================
preproc;
% ========================================================================
% Симуляция
% =========================================================================
% Первоначальные условия
q0 = [pi/2;pi/2;pi/3;pi/2;pi/2;pi/2;0;0;0;0;0;0];
% Начало процесса интегрирования
[t, q] = ode113(@(t,q) ode_dqdt(t,q,p), 0:0.1:5, q0, odeset('RelTol',1e-7));
fprintf('OK\n');

%% ========================================================================
% Постпроцессинг (постобработка)
% =========================================================================
set(0,'defaultLineLineWidth',2);
set(0,'defaultFigureColor','w');
set(0,'defaultAxesFontSize',12);
set(0,'DefaultAxesXGrid','on');
set(0,'DefaultAxesYGrid','on');

figure;
subplot(511);
plot(t, q(:,1));legend('\phi_{11}');xlabel('t, s');
subplot(512);
plot(t, q(:,2:3));legend('\phi_{21}','\phi_{22}');xlabel('t, s');
subplot(513);
plot(t, q(:,4));legend('\phi_{33}');xlabel('t, s');
subplot(514);
plot(t, q(:,5));legend('\phi_{44}');xlabel('t, s');
subplot(515);
plot(t, q(:,6));legend('\phi_{55}');xlabel('t, s');
set(gca,'FontSize',12); grid on;

%% ========================================================================
% Валидация: Проверка сохранения энергии
% =========================================================================
[T, V] = Energy(q,p);
figure;
plot(t, T+V,'-',t, T,'--', t, V,':'); 
legend('Total energy', 'Kinetic energy', 'Potential energy'); 
xlabel('t, s'); ylabel('Energy, J');

%% ========================================================================
% Экспорт данных для анимации
% =========================================================================
% Время, углы, производные углов
csvwrite('./animation/results.csv',[t q])
%csvwrite('./animation/vec_d.csv',p.d)